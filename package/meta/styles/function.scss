@use 'sass:map';
@use 'sass:math';
@use 'sass:color';
@use 'sass:string';

// @use 'element-plus/theme-chalk/src/mixins/config.scss' as *;
@use 'element-plus/theme-chalk/src/mixins/function.scss' as *;
@use 'element-plus/theme-chalk/src/mixins/_var.scss' as *;
@use './common/config.scss' as *;

$moda-sep: null !default;

// join var name
// joinVarName(('button', 'text-color')) => '--qif-button-text-color'
@function joinVarName($list) {
  $name: '--' + $namespace;
  @each $item in $list {
    @if $item !='' {
      $name: $name + '-' + $item;
    }
  }
  @return $name;
}

// getCssVarName('button', 'text-color') => '--qif-button-text-color'
@function getCssVarName($args...) {
  @return joinVarName($args);
}

// getCssVar('button', 'text-color') => var(--qif-button-text-color)
@function getCssVar($args...) {
  @return var(#{joinVarName($args)});
}

// set css var value, because we need translate value to string
// for example:
// @include set-css-var-value(('color', 'primary'), red);
// --qif-color-primary: red;
@mixin set-css-var-value($name, $value) {
  #{joinVarName($name)}: #{$value};
}

// set all css var for component by map
@mixin set-component-css-var($name, $variables) {
  @each $attribute, $value in $variables {
    @if $attribute == 'default' {
      #{getCssVarName($name)}: #{$value};
    } @else {
      #{getCssVarName($name, $attribute)}: #{$value};
    }
  }
}

// mix colors with white/black to generate light/dark level and enum
// for example:
// @include set-color-mix-value('color', 'primary', 2, red, 'light');
// --el-color-primary-light-1: #ff3333;
// # or
// --el-color-success-light-1: #00ffff;
@mixin set-color-mix-value($name, $type, $number, $color, $mode: 'light', $mix-color: #fff) {
  $moda-sep: ('#{$name}', '#{$type}', '#{$mode}', '#{$number}');
  #{joinVarName($moda-sep)}: #{mix($mix-color, map.get($color, $type, 'base'), math.percentage(math.div($number, 10)))};
}

@function rgb2hex($color) {
  @return unquote('#' + #{string.slice(color.ie-hex-str($color), 4)});
}

// rgba color above solid color
@function mix-overlay-color($upper, $lower) {
  $opacity: color.alpha($upper);

  $red: color.red($upper) * $opacity + color.red($lower) * (1 - $opacity);
  $green: color.green($upper) * $opacity + color.green($lower) * (1 - $opacity);
  $blue: color.blue($upper) * $opacity + color.blue($lower) * (1 - $opacity);

  @return rgb2hex(rgb($red, $green, $blue));
}

// BEM
@mixin b($block) {
    $B: $namespace + '-' + $block !global;
  
    .#{$B} {
      @content;
    }
  }
  
  @mixin e($element) {
    $E: $element !global;
    $selector: &;
    $currentSelector: '';
    @each $unit in $element {
      $currentSelector: #{$currentSelector +
        '.' +
        $B +
        $element-separator +
        $unit +
        ','};
    }
  
    @if hitAllSpecialNestRule($selector) {
      @at-root {
        #{$selector} {
          #{$currentSelector} {
            @content;
          }
        }
      }
    } @else {
      @at-root {
        #{$currentSelector} {
          @content;
        }
      }
    }
  }
  
  @mixin m($modifier) {
    $selector: &;
    $currentSelector: '';
    @each $unit in $modifier {
      $currentSelector: #{$currentSelector +
        $selector +
        $modifier-separator +
        $unit +
        ','};
    }
  
    @at-root {
      #{$currentSelector} {
        @content;
      }
    }
  }
  